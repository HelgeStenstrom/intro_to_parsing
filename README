WIP, a tutorial which demonstrates the basics of Parsec, builds a
limited SQL query parser, before continuing to build a full featured
SQL:2003 query parser.

TOC:

GettingStarted.lhs

Introduction to parsing with Parsec, including a review of
Text.Parsec.Char functions.

VerySimpleExpressions.lhs

Creating a very simple expression language parser, and introducing
some functions from Text.Parsec.Combinator.

ApplicativeStyle.lhs

Rewriting the simple expression parser code in a more succinct style.

CombinatorReview.lhs

Review and examples of all functions from Text.Parsec.Combinator, and
some from Control.Applicative and Control.Monad.

FunctionsAndTypesForParsing.lhs

The utility functions used in the previous tutorials, plus some notes
on types in Parsec.

TextParsecExpr.lhs

This covers using the Text.Parsec.Expr for expression parsing with
prefix, postfix and infix operators with fixity.

AnIssueWithTokenParsers.lhs

Looks at an issue we have with the way the symbol parser in the
Text.Parsec.Expr tutorial was used, and some possible fixes.

TextParsecPerm.lhs

This covers the Text.Parsec.Perm module which is used for parsing
different things in flexible order.

TextParsecToken.lhs

This covers Text.Parsec.Token which can be used to create token
parsers easily.

ValueExpressions.lhs

This covers building a parser a subset of value expressions from SQL,
which are an extension of the simple expression types and parsers
covered in previous tutorials.

QueryExpressions.lhs

This covers building a parser to parse query expressions with select
lists, simple from, where, group by, having and order by.

FromClause.lhs

This extend the parser for query expressions to support a from clause
with much more features including joins.

SimpleSQLQueryParser0.lhs

Here is the code from ValueExpressions, QueryExpressions and
FromClause plus tests put together and rearranged as a coherent
standalone module.

Additional documents not yet started: *** - part of first milestone

*** pretty printing

This will cover writing a pretty printer for SQL using the
Text.PrettyPrint.HughesPJ, and trying to make the output readable with
a nice layout even for complex SQL queries.

*** supporting tpch

we will use the tpch queries as examples to help improve the pretty
printer. First there are a few extra bits of syntax to support so that
they parse

*** pretty printing part 2

some tweaks to the pretty printer to improve the layout for the tpch
queries

*** writing tests

Here we will take the ad hoc tests and build an organised test suite
with a wrapper for hunit, wrapper for test.framework wrapper and maybe
tasty

*** error messages

In this document, we will explore error messages with parsec and how
restructuring parser code can lead to better or worse error messages.

*** refactored project + cabal package

In this tutorial, we will take the sql parser, pretty printer and
tests, and create a complete cabal package.

writing a command line sql interface

quick experiment to try to implement the front end for a multiline sql
command line using fake incremental parsing which parsec doesn't
support directly.

parsec internals

In this tutorial, we will try to understand a bit more about the
implementation of Parsec. We will start by implementing a simple
parser combinator library from scratch.

ANSI SQL grammar

In this really interesting document, we will go through the entire
SQL:2003 grammar, skipping the bits which aren't relevant to queries,
and try to understand and give examples of all the different
bits. This will be used as a guide to complete the parser so that it
can parse all SQL:2003 queries.

extending value expressions to cover more features

In this tutorial(s), we will cover adding all the missing bits in
value expressions from the ANSI SQL:2003 standard.
some ideas:
left factor expression parser
number literals
typed literal
subqueries
full dotted
quoted identifiers/ names
more operators + trickiness with between
splitting the operator ast ctor
aggregate calls
window functions
other value expression things

extending query expressions to cover more features

In this tutorial(s), we will extend the parser to cover all the other
missing features from SQL:2003.
some ideas:
select distinct and select all
union, except, intersect
offset, fetch
explicit table, table value constructor
cte
full table alias
* as (a,b,c)
dotted identifiers in table names, etc.
lateral
tableref function
group by extensions
order by asc, desc, nulls first/last

position annotation

In this tutorial, we will add position annotation to the parsing, so
that a later stage could, e.g., provide type error messages with the
correct line and column numbers.

dialects

In this tutorial, we will discuss how we can support other SQL dialects

separate lexer

In this tutorial, we will look at creating a proper separate lexer to
see how it is done, and remark on what the tradeoffs seem to be.

quasiquotes

In this tutorial, we will create quasiquoters for sql query
expressions and value expressions, and see how powerful this can be

speed and optimisation

maybe some benchmarking: parsing from different sources (memory, disk,
string, strict text, lazy text), compare lex no lex + attoparsec. Look
at the lib for attoparsec and parsec together (one for speed and the
other to retry to get good error messages).

something about syntax highlighting, generating documentation + links


Extras:

ParseString.lhs

an executable which contains the boilerplate to run a parsec parser on
a string passed as an argument

ParseFile.lhs

an executable which contains the boilerplate to run a parsec parser on
a file passed as an argument

TODO: add the parsec wrapper modules with simplified types

Contact: jakewheatmail@gmail.com

License: BSD3
