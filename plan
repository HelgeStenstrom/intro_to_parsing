TODO:

review and remove explicit explanations where feasible, replace with
more examples

try and create a script to render, something like:
pandoc --from=markdown+lhs --to=html ParsingIntroduction.lhs -o ParsingIntroduction.lhs.html -c main.css --toc
for all the files. Investigate how it will look when uploaded to fp

documents which need finishing off:

ParsingIntroduction:
lots of examples to write
simple expressions: tests, pretty printer quickcheck

ParsecExtras:
have to write more on expressions
do the perm and token sections

ValueExpressions:

needs a lot more work, add more discussion of overlap issues,
etc.

QueryExpression:

tidy up and review, there should be some changes in style + discussion
of this

FromClause:

this needs starting again from scratch, build up with lots of
discussion. It might be useful to add more syntax to demonstrate more
issues and techniques

pretty printing:
create a nice pretty printer using the text.pretty lib

writing tests:
tests should already litter the previous code. This document will maybe cover a hunit wrapper, test.framework wrapper, maybe tasty?

error messages:

explore what error messages it produces and look at how the parsers
can be rearranged for better error messages

refactored project:

create a new branch in simple-sql-parser, document how the files are
created, laid out and the cabal and extra stuff created. Maybe talk
about the website also. links to stuff about creating packages

extending value expressions

extend these to add all the bits from ansi sql 2003 (+cherry pick
later bits?) in stages with discussion of issues.
TODO: write list of features and issues
partial list:
left factor expression parser
number literals
typed literal
subqueries
full dotted
quoted identifiers/ names
more operators + trickiness with between
splitting the operator ast ctor
aggregate calls
window functions
other value expression things

extending query expressions
TODO: write list of features and issues
partial list:
select distinct and select all
union, except, intersect
offset, fetch
explicit table, table value constructor
cte
full table alias
* as (a,b,c)
dotted identifiers in table names, etc.
lateral
tableref function
group by extensions
order by asc, desc, nulls first/last

position annotation

dialect support + testing

separate lexer (investigate simplicity of code, accurate
  parse/modify/pretty print, speed, error messages)

quasi quotes

---------

co-ordination:

keep working on simple-sql-parser in parallel to add the complete set
of features for the ansi sql support

then create steps to get to this point from this tutorial parser, so
the original simple-sql-parser code will be completely discarded.

start working on extended package which can replace hssqlppp:
typechecking + ddl, procedural, etc. Should use uuagc?

--

Follow up tutorials/projects

simple implementation of limited sql queries via physical operators in
Haskell

implementing sql aggregates article -> focus on the transformation
from SQL to physical operators

in depth discussion of sql query syntax, the meaning, implementation
  notes and syntax choice notes

article about window functions?

maybe simple hybrid implementation of selectlists and where with
haskell and c++, can talk about some design choices and some
optimisation of the select lists, plus have some serious c++ code.

c++ parser

--

maybe this should come later in a document:

introduction:
what is parsing, parse tree, ast, pretty printing, (+semantic
  checking, optimisation, intepreting, compiling)
  parse trees, abstract and concrete syntax, abstract interpretation
what is parsing good for: replaces regexes, can be used for dsls and
  for working in a heterogenous system

what can the SQL parser be used for

document creation:
text + syntax highlighting: use pandoc/markdown?
document structure + nav ??
diagramming tools: declarative language + drawn
interactive prompts
